from rest_framework import serializers
from .models import Server, NetworkDevice, IP
from manufacturer.models import Manufacturer, ProductModel
from collections import OrderedDict

class ServerSerializer(serializers.ModelSerializer):
    '''
    服务器序列化类
    '''
    class Meta:
        model = Server
        fields = '__all__'


class ServerAutoReportSerializer(serializers.Serializer):
    '''
    服务器自动同步序列化
    '''
    ip = serializers.IPAddressField(required=True)
    hostname = serializers.CharField(required=True, max_length=20)
    cpu = serializers.CharField(required=True, max_length=50)
    mem = serializers.CharField(required=True, max_length=20)
    disk = serializers.CharField(required=True, max_length=200)
    os = serializers.CharField(required=True, max_length=50)
    sn = serializers.CharField(required=True, max_length=50)
    manufacturer = serializers.CharField(required=True)
    model_name = serializers.CharField(required=True) # 型号的外键指向厂商
    # manufacturer = serializers.PrimaryKeyRelatedField(many=False, queryset=Manufacturer.objects.all())
    # model_name = serializers.PrimaryKeyRelatedField(many=False, queryset=ProductModel.objects.all())
    uuid = serializers.CharField(required=True, max_length=50)
    network = serializers.JSONField(required=True)

    def validate_manufacturer(self, value:str): # 验证某一个字段的数据
        try:
            return Manufacturer.objects.get(vendor_name__exact=value)
        except Manufacturer.DoesNotExist as e:
            print(e, '厂商不存在，需要创建')
            return Manufacturer.objects.create(vendor_name=value)

    def validate_networks(self, value:str):
        print(type(value), value)
        return value


    def validate(self, attrs:OrderedDict):
        print(attrs)
        manufacturer_obj = attrs.get('manufacturer') # 看这个厂商下面有没有传来的型号
        try:
            attrs['model_name'] = manufacturer_obj.productmodel_set.get(model_name__exact=attrs['model_name'])
        except ProductModel.DoesNotExist as e:
            print(e, '型号不存在，或者不唯一')
            attrs['model_name'] = ProductModel.objects.create(model_name=attrs['model_name'], vendor=manufacturer_obj)

        return attrs

    def create_server(self, validated_data):
        networks = validated_data.pop('network')
        server_obj = Server.objects.create(**validated_data)
        self.check_server_network_device(server_obj, networks)
        return server_obj

    def create(self, validated_data):
        uuid = validated_data["uuid"].lower()
        sn   = validated_data["sn"].lower()

        try:
            if sn == uuid or sn == "" or sn.startswith("vmware"):
                server_obj = Server.objects.get(uuid__icontains=uuid)
            else:
                server_obj = Server.objects.get(sn__icontains=sn)
        except Server.DoesNotExist:
            return self.create_server(validated_data)
        else:
            return self.update_server(server_obj, validated_data)

    def update_server(self, instance, validated_data):
        instance.hostname = validated_data.get("hostname", instance.hostname)
        instance.cpu = validated_data.get("cpu", instance.cpu)
        instance.ip = validated_data.get("ip", instance.ip)
        instance.mem = validated_data.get("mem", instance.mem)
        instance.disk = validated_data.get("disk", instance.disk)
        instance.os = validated_data.get("os", instance.os)
        instance.save()
        self.check_server_network_device(instance, validated_data["network"])
        return instance

    def check_server_network_device(self, server_obj, networks):
        '''
        检查服务器有没有这些网卡设备并关联
        :param server_obj:
        :param networks:
        :return:
        '''
        network_device_queryset = server_obj.networkdevice_set.all()
        # 获取所有的网卡名
        current_network_device_queryset = []

        for device in networks:
            print(device, '!!!!!!!')
        for device in networks:


            try:
                print(device)
                network_device_obj = network_device_queryset.get(name__exact=device['name'])
            except NetworkDevice.DoesNotExist as e:
                # 网卡不存在

                print(e, '网卡不存在')
                print(device, ')))))))))))')
                network_device_obj = self.create_network_device(server_obj, device)
                print(network_device_obj, 'hahahahah')

            print(device, '!@!#@(&$&@&@(!!!!!!!!')
            print(device, '++++++++++++++++++++++++++++++----')
            self.check_ip(network_device_obj, device["ips"])
            current_network_device_queryset.append(network_device_obj)

        for network_device_obj in set(network_device_queryset) - set(current_network_device_queryset):
            network_device_obj.delete()


    def check_ip(self, network_device_obj, ifnets):
        ip_queryset = network_device_obj.ip_set.all()
        print(ifnets, '+++++++++++++++++++++++++')
        current_ip_queryset = []
        for ifnet in ifnets:
            try:
                ip_obj = ip_queryset.get(ip_addr__exact=ifnet['ip_addr'])
            except IP.DoesNotExist as e:
                ip_obj = self.create_ip(network_device_obj, ifnet)
                print('ip 不在', e)

            current_ip_queryset.append(ip_obj)
        for ip_obj in set(ip_queryset) - set(current_ip_queryset):
            ip_obj.delete()


    def create_ip(self, network_device_obj, ifnet):
        print(ifnet, '~~~~~~~~~~')
        ifnet['device'] = network_device_obj
        return IP.objects.create(**ifnet)

    def create_network_device(self, server_obj, device):
        device.pop('ips')
        device['host'] = server_obj
        print(device, '------------')
        network_device_obj = NetworkDevice.objects.create(**device)
        # self.check_ip(network_device_obj, ips)
        return network_device_obj

    def to_representation(self, instance):
        ret = {
            'ip': instance.ip,
            'hostname': instance.hostname
        }
        return ret


class NetworkDeviceSerializer(serializers.ModelSerializer): # 这个类实现了create方法，并且把model的中文显示
    '''
    网卡序列化
    '''
    class Meta:
        model = NetworkDevice
        fields = '__all__'

class IPSerializer(serializers.ModelSerializer): # 这个类实现了create方法，并且把model的中文显示
    '''
    IP序列化
    '''
    class Meta:
        model = IP
        fields = '__all__'
